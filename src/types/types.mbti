// Generated using `moon info`, DON'T EDIT IT
package "oboard/moonbit-eval/types"

// Values

// Types and methods
pub(all) struct Fundef {
  name : (String, Type)
  args : Array[(String, Type)]
  body : Syntax
}
fn Fundef::from_json(Json) -> Self raise
fn Fundef::to_fn_dict(Self) -> Json
impl Show for Fundef

type Name
fn Name::from_json(Json) -> Self raise
fn Name::from_string(String) -> Self raise NameFromStringError
fn Name::name_and_slot(String, Int) -> Self
fn Name::name_only(String) -> Self
fn Name::slot_only(Int) -> Self
fn Name::to_json(Self) -> Json
fn Name::to_string(Self) -> String
impl Compare for Name
impl Eq for Name
impl Hash for Name
impl Show for Name

type NameFromStringError
impl Show for NameFromStringError

pub(all) enum Op {
  Add
  Sub
  Mul
  Div
  EqEq
  LessEqual
  NotEqual
  LessThan
  GreaterThan
  GreaterEqual
  And
  Or
}
impl Eq for Op
impl Show for Op
impl ToJson for Op

pub(all) enum Syntax {
  Unit
  Bool(Bool)
  Int(Int)
  Double(Double)
  String(String)
  Var(String)
  Tuple(Array[Syntax])
  Not(Syntax)
  Array(Array[Syntax])
  Neg(Syntax)
  App(Syntax, Array[Syntax])
  Get(Syntax, Syntax)
  If(Syntax, Syntax, Syntax)
  ForIn(Syntax, Syntax)
  For(Syntax, Syntax, Syntax, Syntax)
  While(Syntax, Syntax)
  Lambda(String, Syntax)
  Prim(Syntax, Syntax, Op)
  Assign(String, Syntax)
  Let((String, Type), Syntax, Syntax, mutable~ : Bool)
  LetRec(Fundef, Syntax)
  LetTuple(Array[(String, Type)], Syntax, Syntax)
  Put(Syntax, Syntax, Syntax)
  Seq(Array[Syntax])
}
fn Syntax::from_json(Json) -> Self raise
fn Syntax::to_dict(Self) -> Json
impl Show for Syntax

pub(all) enum Type {
  Unit
  Bool
  Int
  Double
  String
  Fun(Array[Type], Type)
  Tuple(Array[Type])
  Array(Type)
  Var(Ref[Type?])
  Ptr
}
fn Type::from_json(Json) -> Self raise
fn Type::is_float_like(Self) -> Bool
fn Type::is_ptr_like(Self) -> Bool
fn Type::repr(Self) -> Self
fn Type::size_of(Self, Int) -> Int
fn Type::to_json(Self) -> Json
impl Eq for Type
impl Show for Type

// Type aliases

// Traits

