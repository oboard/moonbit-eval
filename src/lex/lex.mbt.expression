// 表达式词法解析

// Token枚举用于表示源代码中识别出的词法单元。
enum Token {
  Number(Int)
  LParen
  RParen
  Add
  Sub
  Mul
  Div
} derive(Show)

struct Context {
  str : String
  mut offset : Int
  array : Array[Token]
}

pub fn lex(context : Context) -> Unit {
  let { offset, str, array } = context
  if offset >= str.length() {
    return
  }
  match str[offset] {
    '+' => {
      array.push(Add)
      context.offset += 1
      lex(context)
    }
    '-' => {
      array.push(Sub)
      context.offset += 1
      lex(context)
    }
    '*' => {
      array.push(Mul)
      context.offset += 1
      lex(context)
    }
    '/' => {
      array.push(Div)
      context.offset += 1
      lex(context)
    }
    '(' => {
      array.push(LParen)
      context.offset += 1
      lex(context)
    }
    ')' => {
      array.push(RParen)
      context.offset += 1
      lex(context)
    }
    ' ' | '\n' | '\t' | '\r' => {
      context.offset += 1
      lex(context)
    }
    ch => if ch >= '0' && ch <= '9' { lex_number(context) } else { panic() }
  }
}

fn lex_number(context : Context) -> Unit {
  let { offset, str, .. } = context
  let number = "\{str[offset]}"
  context.offset += 1
  lex_number_rest(context, number)
}

fn lex_number_rest(context : Context, number : String) -> Unit {
  let { offset, str, array } = context
  if offset >= str.length() {
    array.push(Number(@strconv.parse_int?(number).unwrap()))
    return
  }
  let ch = str[offset]
  if ch >= '0' && ch <= '9' {
    context.offset += 1
    lex_number_rest(context, number + ch.to_string())
  } else {
    array.push(Number(@strconv.parse_int?(number).unwrap()))
    lex(context)
  }
}

test {
  let array = []
  lex({ str: "-10123 -+ - 523 103 (5))", offset: 0, array })
  inspect(
    array,
    content="[Sub, Number(10123), Sub, Add, Sub, Number(523), Number(103), LParen, Number(5), RParen, RParen]",
  )
  // todo
  // let array = []
  // lex({ str: "let a=1", offset: 0, array })
  // inspect(
  //   array,
  //   content="[let, a, ",
  // )
  println("TODO lex")
}