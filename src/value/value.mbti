// Generated using `moon info`, DON'T EDIT IT
package "oboard/moonbit-eval/value"

import(
  "moonbitlang/parser/syntax"
)

// Values
fn infer_type_from_constant(@syntax.Constant) -> String

fn runtime_value_infix(String, RuntimeValue, RuntimeValue) -> RuntimeValue

fn type_to_string(@syntax.Type) -> String

// Errors

// Types and methods
pub(all) struct RuntimeArgument {
  value : RuntimeValue
  kind : @syntax.ArgumentKind
}

pub(all) struct RuntimeEnvironment {
  values : Map[String, RuntimeValue]
  mutable_vars : Map[String, Bool]
  parent : RuntimeEnvironment?
}
fn RuntimeEnvironment::copy(Self) -> Self
fn RuntimeEnvironment::create_closure_env(Self) -> Self
fn RuntimeEnvironment::new(parent? : Self) -> Self
impl Show for RuntimeEnvironment

pub(all) enum RuntimeValue {
  Unit
  Bool(Bool)
  Int(Int)
  UInt(UInt)
  Int64(Int64)
  UInt64(UInt64)
  Float(Float)
  Double(Double)
  Char(Char)
  Byte(Byte)
  String(String)
  Tuple(Array[RuntimeValue])
  Array(Array[RuntimeValue])
  Struct(Ref[Map[String, RuntimeValue]])
  Closure(@syntax.Func, RuntimeEnvironment)
  Constructor(String, Array[RuntimeValue])
  Break(RuntimeValue?)
  Continue(Array[RuntimeValue])
}
fn RuntimeValue::from_expr(@syntax.Expr) -> Self
fn RuntimeValue::from_option(Self?) -> Self
fn RuntimeValue::is_mutable(Self) -> Bool
fn RuntimeValue::is_reference(Self) -> Bool
fn RuntimeValue::to_expr(Self) -> @syntax.Expr
impl Eq for RuntimeValue
impl Show for RuntimeValue
impl ToJson for RuntimeValue

// Type aliases

// Traits

